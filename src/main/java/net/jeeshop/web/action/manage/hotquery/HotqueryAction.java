package net.jeeshop.web.action.manage.hotquery;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.services.manage.hotquery.HotqueryService;import net.jeeshop.services.manage.hotquery.bean.Hotquery;import net.jeeshop.web.action.BaseController;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;/** * 热门查询管理 * @author dylan */@Controller@RequestMapping("/manage/hotquery/")public class HotqueryAction extends BaseController<Hotquery> {	private static final long serialVersionUID = 1L;	@Autowired	private HotqueryService hotqueryService;	@Autowired	private FrontCache frontCache;	 	private static final String page_toList = "/manage/hotquery/hotqueryList";	private static final String page_toEdit = "/manage/hotquery/hotqueryEdit";	private static final String page_toAdd = "/manage/hotquery/hotqueryEdit";	private HotqueryAction() {		super.page_toList = page_toList;		super.page_toAdd = page_toAdd;		super.page_toEdit = page_toEdit;	}	@Override	public HotqueryService getService() {		return hotqueryService;	}	public void setHotqueryService(HotqueryService hotqueryService) {		this.hotqueryService = hotqueryService;	}	/**     * 公共的更新数据的方法，子类可以通过重写此方法实现个性化的需求。     *     * @return     * @throws Exception     */    @RequestMapping(value = "update", method = RequestMethod.POST)    public String update(HttpServletRequest request, @ModelAttribute("e") Hotquery e, RedirectAttributes flushAttrs) throws Exception {        getService().update(e);        insertAfter(e);        frontCache.loadHotquery();//更新缓存        addMessage(flushAttrs, "操作成功！");        return "redirect:selectList";    }        /**     * 公共的插入数据方法，子类可以通过重写此方法实现个性化的需求。     *     * @return     * @throws Exception     */    @RequestMapping(value = "insert",method = RequestMethod.POST)    public String insert(HttpServletRequest request, @ModelAttribute("e") Hotquery e, RedirectAttributes flushAttrs) throws Exception {        getService().insert(e);        insertAfter(e);        frontCache.loadHotquery();//更新缓存        addMessage(flushAttrs, "操作成功！");        return "redirect:selectList";    }        /**     * 公共的批量删除数据的方法，子类可以通过重写此方法实现个性化的需求。     *     * @return     * @throws Exception     */    @RequestMapping(value = "deletes", method = RequestMethod.POST)    public String deletes(HttpServletRequest request, String[] ids, @ModelAttribute("e") Hotquery e, RedirectAttributes flushAttrs) throws Exception {        getService().deletes(ids);        frontCache.loadHotquery();//更新缓存        addMessage(flushAttrs, "操作成功！");        return "redirect:selectList";    }}